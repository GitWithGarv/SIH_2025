generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  hotelBookings  HotelBooking[]
  flightBookings FlightBooking[]
  hotelReviews   HotelReview[]
  
  @@map("users")
}

model Hotel {
  id          String   @id @default(uuid())
  name        String
  description String
  address     String
  city        String
  state       String   @default("Jharkhand")
  pincode     String
  phone       String
  email       String?
  rating      Float    @default(4.0)
  images      Json     @default("[]")
  amenities   Json     @default("[]")
  latitude    Float?
  longitude   Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  rooms    Room[]
  bookings HotelBooking[]
  reviews  HotelReview[]
  
  @@map("hotels")
}

model Room {
  id          String   @id @default(uuid())
  hotelId     String
  name        String
  type        String
  description String?
  maxGuests   Int      @default(2)
  basePrice   Float
  images      Json     @default("[]")
  amenities   Json     @default("[]")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  hotel    Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  bookings HotelBooking[]
  
  @@map("rooms")
}

model HotelBooking {
  id          String   @id @default(uuid())
  userId      String
  hotelId     String
  roomId      String
  checkIn     DateTime
  checkOut    DateTime
  guests      Int
  totalAmount Float
  status      String   @default("pending")
  paymentId   String?
  paymentStatus String @default("pending")
  guestName   String
  guestEmail  String
  guestPhone  String
  specialRequests String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  room  Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@map("hotel_bookings")
}

model Flight {
  id            String   @id @default(uuid())
  airline       String
  flightNumber  String
  departure     String
  arrival       String
  departureTime DateTime
  arrivalTime   DateTime
  duration      String
  price         Float
  availableSeats Int
  aircraft      String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  bookings FlightBooking[]
  
  @@map("flights")
}

model FlightBooking {
  id            String   @id @default(uuid())
  userId        String
  flightId      String
  passengers    Json
  totalAmount   Float
  status        String   @default("pending")
  paymentId     String?
  paymentStatus String   @default("pending")
  bookingRef    String   @unique
  contactEmail  String
  contactPhone  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  flight Flight @relation(fields: [flightId], references: [id], onDelete: Cascade)
  
  @@map("flight_bookings")
}

model HotelReview {
  id        String   @id @default(uuid())
  userId    String
  hotelId   String
  rating    Int      @default(5)
  title     String
  comment   String
  guestName String
  guestEmail String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  
  @@map("hotel_reviews")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admins")
}
